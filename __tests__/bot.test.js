import { jest } from '@jest/globals';
import { Telegraf } from 'telegraf';
import bot from '../bot.js';

describe('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–∞—Ç-–±–æ—Ç–∞', () => {
  let mockBot;
  let mockCtx;

  beforeEach(() => {
    mockBot = new Telegraf('%'); // –¢–û–ö–ï–ù –°–ö–†–´–¢
    mockCtx = {
      message: {
        chat: { id: 12345 },
        text: '',
        from: { id: 12345, first_name: 'Test' },
      },
      reply: jest.fn(),
    };
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start', async () => {
    mockCtx.message.text = '/start';
    await bot.handleUpdate(mockCtx);

    expect(mockCtx.reply).toHaveBeenCalledWith(
      '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏.',
      expect.any(Object)
    );
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–∞–º—è—Ç–∫–∞ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—É"', async () => {
    mockCtx.message.text = 'üìã –ü–∞–º—è—Ç–∫–∞ –∞–±–∏—Ç—É—Ä–∏–µ–Ω—Ç—É';
    await bot.handleUpdate(mockCtx);

    expect(mockCtx.reply).toHaveBeenCalledWith(
      '–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –ø—É–Ω–∫—Ç:',
      expect.any(Object)
    );
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ "–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"', async () => {
    mockCtx.message.text = 'üìö –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏';
    await bot.handleUpdate(mockCtx);

    expect(mockCtx.reply).toHaveBeenCalledWith(
      '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—è—Ö:\n1. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å 1\n2. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å 2\n3. –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å 3'
    );
  });

  test('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"', async () => {
    mockCtx.message.text = 'üîô –ù–∞–∑–∞–¥';
    await bot.handleUpdate(mockCtx);

    expect(mockCtx.reply).toHaveBeenCalledWith(
      '–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.',
      expect.any(Object)
    );
  });
});